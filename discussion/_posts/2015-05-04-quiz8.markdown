---
layout: post
title:  "Discussion 8 Quiz"
date:   2016-07-19 13:00:00
categories: quizzes
---

[This week's slides](https://docs.google.com/a/berkeley.edu/presentation/d/1B3D5uCMBEuyZrgHbhKF5zOJK6LVJwvI5FXXD2QE_bGY/edit?usp=sharing)  
[Link to form](http://goo.gl/forms/b3scpxFBvl)  

---

### Concepts  
1. What is the difference between a special form expression and other expressions in Scheme?  
1. How many elements does a pair consist of?  
3. What is the difference between a well-formed list and a malformed list?  

<a class="btn btn-default solution-toggle">TOGGLE SOLUTION</a>

<blockquote class="solution">
1. All expressions but special forms get evaluated using the 3-step rule, 1) eval operator, 2) eval operands, and 3) apply operator to operands. Special forms, however, don't necessarily evaluate all their operands before apply the operator. Take the <code>if</code> form, which only evaluates the operand that corresponds to the truth value of the predicate. <br/>
2. A pair always only consists of two elements. Don't confuse pairs with lists. Lists are constructed using pairs, whose first argument is an element in the list and whose second argument is another pair. <br/>
3. A well-formed list is recursively defined as a pair whose first argument is the first element in the list and the second argument is another well-formed list. The base case for this recursive definition is <code>nil</code>, the empty well-formed list. A malformed list has non-well-formed lists as its second arguments in one or more of its pairs.
</blockquote>

---

### Problems  

#### Question 1
Draw the box and pointer diagrams for the following Scheme lists. How does each get output in the Scheme interpreter?  
{% highlight scheme %}
scm> (cons 1 2)

scm> (cons 1 (cons 2 3))

scm> (cons 1 (cons 2 nil))

scm> (cons 1 (cons (cons 3 (cons 4 5)) (cons 2 (cons 3 nil))))
{% endhighlight %}

<a class="btn btn-default solution-toggle-2">TOGGLE SOLUTION</a>

<blockquote class="solution-2">{% highlight scheme %}
scm> (cons 1 2)
(1 . 2)
scm> (cons 1 (cons 2 3))
(1 2 . 3)
scm> (cons 1 (cons 2 nil))
(1 2)
scm> (cons 1 (cons (cons 3 (cons 4 5)) (cons 2 (cons 3 nil))))
(1 (3 4 . 5) 2 3)
{% endhighlight %}
</blockquote>
   
<br/>

#### Question 2
Define `count` so that it returns the number of times `x` appears in `lst`, a well-formed list.

{% highlight scheme %}
(define (count lst x)
    ; your code here
)
{% endhighlight %}

Remember, you can nest <code>if</code> statements to simulate an `elif`, as follows:
{% highlight scheme %}
(if (> x 0)
    'positive
    (if (< x 0)
        'negative
        'zero
      )
  )
{% endhighlight %}
Here we're saying `if x > 0` return `positive`, `elif x < 0` return `negative`, `else` return `zero`. 

<a class="btn btn-default solution-toggle-3">TOGGLE SOLUTION</a>

<blockquote class="solution-3">{% highlight scheme %}
(define (count lst x)
    (if (null? lst)
        0
        (if (= x (car lst))
            (+ 1 (count (cdr lst) x))
            (count (cdr lst) x)
          )
      )
  )
{% endhighlight %}
</blockquote>
