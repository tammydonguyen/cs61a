---
layout: post
title:  "Discussion 2 Quiz"
date:   2016-06-23 13:00:00
categories: quizzes
---

[Link to attendance and pizza.](http://tiny.cc/tammydisc2)  
[This week's slides.](https://docs.google.com/presentation/d/1UQx9sSLovlhm2oy7f0SKb8vDV_4glXCa0Co8HHtzzi0/edit?usp=sharing)

---
### Question 3  

Fill in the blanks so that <code>cs</code> and <code>61a</code> alternate printing for a total of <code>n</code> times.

{% highlight python %}
def cs61a(n):
    """
    >>> cs61a(3)
    cs
    61a
    cs
    >>> cs61a(2)
    cs
    61a
    """
    i = 0
    while __________:
        if _________:
            print("cs")
        else:
            print("61a")
        ____________
{% endhighlight %}    

<a class="btn btn-default solution-toggle-3">TOGGLE SOLUTION</a>

<div class="solution-3">
{% highlight py3 %}
def cs61a(n):
    i = 0
    while i < n:
        if i % 2 == 0:
            print("cs")
        else:
            print("61a")
        i += 1
{% endhighlight %}    
</blockquote>

### Question 1 

Name the higher order function(s) in the code below and tell why they are higher order

{% highlight python %}
def foo(g, x):
    def baz(y):
        return g(x, y)
    z = baz
    return z

def bar():
    return baz
{% endhighlight %}

<a class="btn btn-default solution-toggle">TOGGLE SOLUTION</a>

<blockquote class="solution"><code>foo</code> is higher order because it takes in a function as its first argument (parameter <code>g</code>) as well as returns the function object <code>baz</code> referenced to by <code>z</code>. <br/>
<code>baz</code> is not higher order because it neither takes in a function as an argument nor returns a function. Rather, it returns a <i>function call</i> to <code>g</code> on the arguments <code>x</code> and <code>y</code>. <br/>
<code>bar</code> is also not higher order because it neither takes in a function as an argument nor returns a function. In fact, when called, a <code>NameError</code> will be raised because there is no name <code>bar</code> defined in its environment.
</blockquote>

 --- 
  
### Question 2

{% highlight python %}
def decrement(x):
    return x - 1

def half(x):
    return x // 2

def decrease_to_one(f, n):
    i = 0
    while n > 1:
        n = f(n)
        i += 1
    return i
{% endhighlight %}


How many call frames are opened if you call `decrease_to_one(decrement, 5)`? What about `decrease_to_one(half, 8)`?

<a class="btn btn-default solution-toggle-2">TOGGLE SOLUTION</a>

<blockquote class="solution-2">The initial call to <code>decrease_to_one</code> will open a frame. In the body of <code>decrease_to_one</code>, <code>f</code> is called until <code>n</code> reaches <code>1</code>. So the question is, how many times does it take to reach <code>1</code> from <code>n</code> by calling <code>f</code> on it? For <code>decrease_to_one(decrement, 5)</code>, it'll take 4 calls to <code>f</code> (<code>f(5)</code>, <code>f(4)</code>, <code>f(3)</code>, <code>f(2)</code>), and for <code>decrease_to_one(half, 8)</code>, it'll take 3 calls to <code>f</code> (<code>f(8)</code>, <code>f(4)</code>, <code>f(2)</code>). Each of these calls requires a new frame, so the answers are <b>5</b> and <b>4</b>.
</blockquote>

 --- 
  
### Question 3

What is the first step to evaluate an **assignment statement**? What about a **call expression**?

<a class="btn btn-default solution-toggle-3">TOGGLE SOLUTION</a>

<blockquote class="solution-3">For assignment statements, always evaluate the right hand side of the <code>=</code> first. See <a href="/cs61a-resources/guides/env-diag.html#assignment">here</a> for more details. <br/>
For call expressions, always evaluate the operator corresponding to the outermost call expression first (i.e., <code>foo(bar(x), y)</code> in <code>foo(bar(x), y)()</code>) first. This will, of course technically mean that the first name you look up is <code>foo</code>. See <a href="/cs61a-resources/guides/env-diag.html#call">here</a> for more details. <br/>
</blockquote>
