---
layout: post
title:  "Discussion 11"
date:   2016-07-28 13:00:00
categories: discussion
---

# Links

[Slides](https://docs.google.com/presentation/d/1EvIBXCCXNqHtvYxb-75pgG3ruqsq694IPUT-DyxHaHo/edit?usp=sharing)  
[Attendance and Feedback](https://docs.google.com/forms/d/e/1FAIpQLSeYmt2n87zBIj8xHmBEEvmilIbRwLwTUOEV0oEJnsal7JAaNQ/viewform)  
[Scheme Interpreter](http://cs61a.org/assets/interpreter/scheme)

---

# Concepts  
1. When are `eval` and `apply` mutually recursive?
2. Why do special forms have to be handled separately from regular call expressions?

---

# Problems

## Question 1
Consider today's `Calculator` interpreter. How many calls to `calc_eval` and `calc_apply` are there for the following two pieces of code?

{% highlight scheme %}
(+ (- 1 2 3) (* 2 (+ 1 2)) 4)
{% endhighlight %}

<a class="btn btn-default solution-toggle">TOGGLE SOLUTION</a>
<blockquote class="solution">
Each time we get to a function call, we count 1 eval for the entire expression, 1 eval for its operator, and 1 eval for each of its operands. For example, <code>(- 1 2 3)</code> takes (1 call for the entire expression) + (1 call for the operand -) + (3 calls for the operands) = 5 calls to eval. After evaluating the last operand, in this case the primitive expression 3, we do one apply. Since these arithmetic functions are primitive, there are no eval calls made in the process of applying. If we recursively apply this technique, we end up with 15 calls to eval and 4 calls to apply.
</blockquote>

{% highlight scheme %}
(define foo (lambda (x) (+ 7 (* x 2))))
(- 4 (+ 2 3) (foo (* 3 2)))
{% endhighlight %}

<a class="btn btn-default solution-toggle-2">TOGGLE SOLUTION</a>
<blockquote class="solution-2">
First, we define the function foo. We <code>calc_eval</code> the line, and fine that define is a special form. The define special form requires just evaluating the 2nd operand. Evaluating a lambda expression doesn't involve any calls to eval or apply. Thus, the first line takes two calls to <code>calc_eval</code>, one for the define expression and another to evaluate the lambda expression. Then, we follow the same technique as above, except this time we encounter a user-defined function foo. In this case, in order to apply foo, we have to make calls to eval. Specifically, applying foo means evaluating the expression (+ 7 (* x 2)), which itself takes 7 calls to eval and 2 to apply. This makes for a total of 22 calls to eval and 6 calls to apply.
</blockquote>
