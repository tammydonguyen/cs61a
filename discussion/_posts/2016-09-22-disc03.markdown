---
layout: post
title:  "Discussion 3"
date:   2016-09-22 11:00:00
---

# Links  
[Slides](https://docs.google.com/a/berkeley.edu/presentation/d/1i6u5VO-efTT2TQPfBWTrmd8AF1z8ya-sLQkj12Qd6kI/edit?usp=sharing)  
[Attendance](https://docs.google.com/forms/d/1P0_q7PT0JPxOf1_NSS5Ww_CO4p_Il2CP-1nbHDQixl8/viewform)

---

# Concepts  
1. What makes a tree recursively defined?  
2. What does the `root` selector return? What does the `branches` selector return? Why is it wrong to do `entry(children(t))`, where `t` is a tree?  
3. How can we process trees using recursion?

---

# Problems  

## Question 1   
Write a function that counts the number of occurences of x in lst.  
{% highlight python %}
def count(lst, x):
    "*** YOUR CODE HERE ***"
{% endhighlight %}

<a class="btn btn-default solution-toggle">TOGGLE SOLUTION</a>

<blockquote class="solution">
{% highlight python %}
def count(lst, x):
    if lst == []:
        return 0
    if lst[0] == x:
        return 1 + count(lst[1:], x)
    return count(lst[1:], x)
{% endhighlight %}
</blockquote>

## Question 2
Write a function that returns `True` if `t` only contains values from `lst` and `False` otherwise.  
{% highlight python %}
def tree_in_list(t, lst):
    "*** YOUR CODE HERE ***"
{% endhighlight %}

<a class="btn btn-default solution-toggle-2">TOGGLE SOLUTION</a>

<blockquote class="solution-2">
{% highlight python %}
def tree_in_list(t, lst):
    if root(t) not in lst:
        return False
    for b in branches(t):
        if not tree_in_list(b, lst):
            return False
    return True
{% endhighlight %}
</blockquote>

