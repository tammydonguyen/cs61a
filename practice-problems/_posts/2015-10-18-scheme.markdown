---
layout: post
title:  "Scheme"
date:   2015-10-18 11:14:11
category: practice-problems
tags: scheme
---

**This page is under construction!**

----

<a name="lists" class="anchor"></a>   

## Lists  
**Q1:** Write a function `attach` which returns a new list with `elem` added to the end of a list. Do not use the built-in function `append`.  

{% highlight scheme %}
scm> (attach 1000 '())
(1000)
scm> (attach 4 '(1 2 3))
(1 2 3 4)
scm> (attach 2 (list 4 3 5))
(4 3 5 2)

(define (attach elem lst)
    "YOUR CODE HERE"
  )
{% endhighlight %}

<a class="solution-toggle btn btn-default">TOGGLE SOLUTION</a>

<div class="solution"> 
{% highlight scheme %}
(define (attach elem lst)
    (if (null? lst) 
        (list elem)
        (cons (car lst) (attach elem (cdr lst)))
      )
  )
{% endhighlight %}
</div>
    
What will the following call return?

{% highlight scheme %}
scm> (attach '(d e) '(a b c))
{% endhighlight %}

<blockquote class="solution-2"><code>(a b c (d e))</code></blockquote>

<a class="solution-toggle-2 btn btn-default">TOGGLE SOLUTION</a>

**Q2:** Implement `append`, which takes two lists and combines them into one.

{% highlight scheme %}
scm> (append '() '(1 2 3))
(1 2 3)
scm> (append '(a b c) '())
(a b c)
scm> (append '(c s) '(6 1 a))
(c s 6 1 a)

(define (append lst1 lst2)
    "YOUR CODE HERE"
  )
{% endhighlight %}

<a class="solution-toggle-3 btn btn-default">TOGGLE SOLUTION</a>

<div class="solution-3">  
{% highlight scheme %}
(define (append lst1 lst2)
    (if (null? lst1) lst2
        (cons (car lst1) (append (cdr lst1) lst2))
      )
  )
{% endhighlight %}
</div>

<a name="tail" class="anchor"></a>  

## Tail Recursion   
**Q1:** Look at the solutions I've provided for `attach` and `append`. What are the tail calls? Are the functions tail recursive? 

<blockquote class="solution-4"><code>attach</code> is not tail recursive. The tail calls are a call to <code>list</code> and a call to <code>cons</code>. The tail call for <code>append</code> is to <code>cons</code>. This is also not tail recursive, since the recursive call is passed as an argument to <code>cons</code>.  </blockquote>

<a class="solution-toggle-4 btn btn-default">TOGGLE SOLUTION</a>

**Q2:** Implement `len-tail`, which is a tail recursive procedure that returns the length of the input list.  

{% highlight scheme %}
scm> (len-tail '())
0
scm> (len-tail '(1 2 3))
3

(define (len-tail lst)
    "YOUR CODE HERE"
  )
{% endhighlight %}

<blockquote class="solution-5">
    <b>Hint:</b> Use a helper function to keep track of and increment the length.
</blockquote> 

<a class="solution-toggle-6 btn btn-default">TOGGLE SOLUTION</a> &nbsp; <a class="solution-toggle-5 btn btn-default">TOGGLE HINT</a>

<div class="solution-6">  
{% highlight scheme %}
(define (len-tail lst)
    (define (helper lst result) 
        (if (null? lst) result
            (helper (cdr lst) (+ 1 result)))
      )
    (helper lst 0)
  )
{% endhighlight %}
</div>

**Q3:** Without using `len-tail`, implement `compare-len`, which takes in two lists and outputs 0 if they're the same length, 1 if `lst1` is longer, or `2` if `lst2` is longer.

{% highlight scheme %}
scm> (compare-len (list 1 2 3) (list 4 5 6)
0
scm>  (compare-len '(3 3 3 3) '(5 5 5))
1
scm>  (compare-len '(h i) '(b y e))
2

(define (compare-len lst1 lst2)
    "YOUR CODE HERE"
)
{% endhighlight %}

<a class="solution-toggle-7 btn btn-default">TOGGLE SOLUTION</a>

<div class="solution-7">  
{% highlight scheme %}
(define (compare-len lst1 lst2)
    (cond ((and (null? lst1) (null? lst2)) 0)
          ((null? lst1) 1)
          ((null? lst2) 2)
          (else (compare-len (cdr lst1) (cdr lst2)))
      )
  )
{% endhighlight %}
</div>

<a name="streams" class="anchor"></a>  

## Streams  
Write a function `powers` that returns a stream of all the powers of `n`. 

{% highlight scheme %}
scm> (powers 3)
(3 . #[promise (not forced)])
scm> (stream-to-list (powers 3) 10)
(3 9 27 81 243 729 2187 6561 19683 59049)
scm> (stream-to-list (powers 2) 10)
(2 4 8 16 32 64 128 256 512 1024)
    
(define (powers n)
    "YOUR CODE HERE"
  )
{% endhighlight %}

<a class="solution-toggle-8 btn btn-default">TOGGLE SOLUTION</a>

<div class="solution-8">
{% highlight scheme %}
(define (powers n)
    (define (helper curr)
        (cons-stream curr (helper (* n curr)))
      )
    (helper n)
  )
{% endhighlight %}
</div>
