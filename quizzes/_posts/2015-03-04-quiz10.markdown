---
layout: post
title:  "Week 10 Quiz"
date:   2015-03-04 11:00:00
categories: quizzes
---

[This week's slides](https://docs.google.com/a/berkeley.edu/presentation/d/1ulpQih6seuyInFaARsR1yRk-nNR5_wixutbBqlIWME0/edit?usp=sharing)  
[Link to form](https://docs.google.com/a/berkeley.edu/forms/d/1DUWSl6QW4KqJfPCWmNq-SAto6E6EQc7Bdq03jJEJ8B0/viewform)  

---

### Concepts
1. An _________ keeps track of the current element in an ___________.  
2. What are the properties of `yield`? What is it used for?  
3. When constructing a Scheme stream with `(cons-stream <first> <rest>)`, what is `<rest>`?  
4. When constructing a Python stream with `Stream(<first>, <rest>)`, what is `<rest>`?  
5. You make a stream and you call `cdr-stream` on it (or, in Python, you access its `.rest`). What happens when you call `cdr-stream` again?  

### Problems

#### Question 1: WWSP?

{% highlight scheme %}
scm> (define a (cons-stream (+ 1 2) (lambda () (cons-stream 6 nil))))
s
scm> (define b (cons-stream (+ 1 2) (cons-stream 6 nil)))
scm> a

scm> b

scm> (cdr-stream a)

scm> (cdr-stream b)

scm> ((cdr-stream a))

{% endhighlight %}

Between `a` and `b`, which is a well-formed stream? Why?
  

#### Question 2: Filter List to Stream
Given a list `lst`, turn it into a stream that contains only the elements in `lst` that satisfy the filter function `f`.

{% highlight scheme %}
scm> (define evens (lst-to-stream-filter '(1 2 3 4 5 6) even?))
evens
scm> (car evens)
2
scm> (cdr-stream evens)
(4 . #[promised(not forced)])
{% endhighlight %}

{% highlight scheme %}
(define (lst-to-stream-filter lst f)
    'YOUR-CODE-HERE
)
{% endhighlight %}
  

#### Question 3: Repeated Naturals
Implement an infinite stream similar to natural numbers except each element is repeated as many times as its value. In other words, create the stream version of this sequence: `(1 2 2 3 3 3 4 4 4 4 ...)`

You might want to create a helper function that takes in two parameters, one that keeps track of the current number you're on, and another that keeps track of how many times you've added the current number.

{% highlight scheme %}
(define (repeated-naturals)
    (define (make-stream n i)
        'YOUR-CODE-HERE
    )
)
{% endhighlight %}

Feel free to use the following function that turns the first n elements of a stream into a list to debug:

{% highlight scheme %}
(define (stream-to-list s n)
    (if (or (null? s) (= n 0)) nil
        (cons (car s) (stream-to-list (cdr-stream s) (- n 1)))
))
{% endhighlight %}